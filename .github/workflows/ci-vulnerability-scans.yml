# This file is an example CI test pipeline that will run vulnerability scans on your image
# to ensure images built are secure before they are deployed. 
name: API Linting & Testing CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  check-for-changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      needs-testing: ${{ steps.filter.outputs.needs-testing }}
    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            needs-testing:
              - app/**
              - .github/**/*.yml

  image-scan:
    runs-on: ubuntu-latest
    needs: check-for-changes
    if: ${{ needs.check-for-changes.outputs.needs-testing == 'true' }}

    steps:
      - uses: actions/checkout@v3

      # Scans Dockerfile for any bad practices or issues before building image
      - name: Scan Dockerfile by hadolint
        uses: hadolint/hadolint-action@v3.0.0
        with:
          dockerfile: app/Dockerfile
          format: json
          failure-threshold: warning

      # Change this make command to whatever you use to build your release image.
      # The env variables are what the image is tagged with in this example command,
      # change as needed
      - name: Build and tag Docker image for scanning
        id: build-image
        env:
          ECR_REGISTRY: image-scan-test
          ECR_REPOSITORY: not-pushed-to-repo
          IMAGE_TAG: workflow
        run: |
          make release-build
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Scan server image
        uses: ./.github/actions/image-scan
        with:
          image: ${{ steps.build-image.outputs.image }}

  linting-and-testing:
    runs-on: ubuntu-latest
    needs: check-for-changes
    if: ${{ needs.check-for-changes.outputs.needs-testing == 'true' }}
    defaults:
      run:
        working-directory: ./app
    steps:
      - uses: actions/checkout@v3

      - name: Initialize the docker containers
        run: make init

      # Change this step to your testing make commands, you can run a list here
      - name: Run Tests
        run: make any-tests-here

  lint-test:
    # Orchestration job that runs the other jobs in parallel
    runs-on: ubuntu-latest
    needs:
      - check-for-changes
      - linting-and-testing
      - image-scan
    if: ${{ needs.check-for-changes.outputs.needs-testing == 'true' }}
    steps:
      - run: echo "Finished running tests successfully!"
