# GitHub Actions CI workflow that runs vulnerability scans on the application's 
# Dockerfile or Docker image to ensure images built are secure before they are deployed.

# The docker image is built once and cached, with that image used by the jobs that 
# require access to the image. 

name: Vulnerability Scans

on:
  workflow_call:
    inputs:
      app_name:
        description: "name of application folder under infra directory"
        required: true
        type: string

jobs:
  hadolint-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/first-file
        id: hadolint-config
        with:
          files: |-
            ${{ inputs.app_name }}/.hadolint.yaml
            .hadolint.yaml

      # Scans Dockerfile for any bad practices or issues
      - name: Scan Dockerfile by hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ inputs.app_name }}/Dockerfile
          format: tty
          failure-threshold: warning
          output-file: hadolint-results.txt
          config: ${{ steps.hadolint-config.outputs.found_file }}

      - name: Save output to workflow summary
        if: always() # Runs even if there is a failure
        run: cat hadolint-results.txt >> "$GITHUB_STEP_SUMMARY"

  build-and-cache:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.shared-output.outputs.image }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
        with:
          driver: docker

      - name: Cache Docker layers
        id: cache-buildx
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ inputs.app_name }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ inputs.app_name }}-buildx-

      - name: Ensure Buildx cache exists
        run: |
          mkdir -p /tmp/.buildx-cache

      - name: Set shared outputs
        id: shared-output
        run: |
          IMAGE_NAME=$(make APP_NAME=${{ inputs.app_name }} release-image-name)
          IMAGE_TAG=$(make release-image-tag)
          echo "image=$IMAGE_NAME:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: Build and tag Docker image for scanning
        # If there's an exact match in cache, skip build entirely
        if: steps.cache-buildx.outputs.cache-hit != 'true'
        run: |
          make release-build \
          APP_NAME=${{ inputs.app_name }} \
          OPTIONAL_BUILD_FLAGS=" \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache"

      - name: Save Docker image
        if: steps.cache-buildx.outputs.cache-hit != 'true'
        run: |
          docker save ${{ steps.shared-output.outputs.image }} > /tmp/docker-image.tar

      - name: Cache Docker image
        if: steps.cache-buildx.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: /tmp/docker-image.tar
          key: ${{ inputs.app_name }}-docker-image-${{ github.sha }}

  trivy-scan:
    runs-on: ubuntu-latest
    needs: build-and-cache

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/first-file
        id: trivy-ignore
        with:
          files: |-
            ${{ inputs.app_name }}/.trivyignore
            .trivyignore

      - uses: ./.github/actions/first-file
        id: trivy-secret
        with:
          files: ${{ inputs.app_name }}/trivy-secret.yaml trivy-secret.yaml

      - name: Restore cached Docker image
        uses: actions/cache/restore@v4
        with:
          path: /tmp/docker-image.tar
          key: ${{ inputs.app_name }}-docker-image-${{ github.sha }}
          restore-keys: |
            ${{ inputs.app_name }}-docker-image-

      - name: Load cached Docker image
        run: |
          docker load < /tmp/docker-image.tar

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: ${{ needs.build-and-cache.outputs.image }}
          format: table
          exit-code: 1
          ignore-unfixed: true
          vuln-type: os
          scanners: vuln,secret
          trivyignores: ${{ steps.trivy-ignore.outputs.found_file }}
        env:
          TRIVY_SECRET_CONFIG: ${{ steps.trivy-secret.outputs.found_file }}

      - name: Save output to workflow summary
        if: always() # Runs even if there is a failure
        run: |
          echo "View results in GitHub Action logs" >> "$GITHUB_STEP_SUMMARY"

  anchore-scan:
    runs-on: ubuntu-latest
    needs: build-and-cache

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/first-file
        id: grype-config
        with:
          files: |-
            ${{ inputs.app_name }}/.grype.yml
            .grype.yml

      - name: Restore cached Docker image
        uses: actions/cache/restore@v4
        with:
          path: /tmp/docker-image.tar
          key: ${{ inputs.app_name }}-docker-image-${{ github.sha }}
          restore-keys: |
            ${{ inputs.app_name }}-docker-image-

      - name: Load cached Docker image
        run: |
          docker load < /tmp/docker-image.tar

      - name: Run Anchore vulnerability scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ needs.build-and-cache.outputs.image }}
          output-format: table
        env:
          GRYPE_CONFIG: ${{ steps.grype-config.outputs.found_file }}

      - name: Save output to workflow summary
        if: always() # Runs even if there is a failure
        run: echo "View results in GitHub Action logs" >> "$GITHUB_STEP_SUMMARY"

  dockle-scan:
    runs-on: ubuntu-latest
    needs: build-and-cache

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/first-file
        id: dockle-config
        with:
          files: |-
            ${{ inputs.app_name }}/.dockleconfig
            .dockleconfig

      - name: Restore cached Docker image
        uses: actions/cache/restore@v4
        with:
          path: /tmp/docker-image.tar
          key: ${{ inputs.app_name }}-docker-image-${{ github.sha }}
          restore-keys: |
            ${{ inputs.app_name }}-docker-image-

      - name: Load cached Docker image
        run: |
          docker load < /tmp/docker-image.tar

      # Dockle doesn't allow you to have an ignore file for the DOCKLE_ACCEPT_FILES
      # variable, this will save the variable in this file to env for Dockle
      - name: Set any acceptable Dockle files
        run: |
          if grep -q "^DOCKLE_ACCEPT_FILES=.*" ${{ steps.dockle-config.outputs.found_file }}; then
            grep -s '^DOCKLE_ACCEPT_FILES=' ${{ steps.dockle-config.outputs.found_file }} >> "$GITHUB_ENV"
          fi

      - name: Run Dockle container linter
        uses: erzz/dockle-action@v1.3.1
        with:
          image: ${{ needs.build-and-cache.outputs.image }}
          exit-code: "1"
          failure-threshold: WARN
          accept-filenames: ${{ env.DOCKLE_ACCEPT_FILES }}

      - name: Save output to workflow summary
        if: always() # Runs even if there is a failure
        run: |
          {
            echo '```json'
            cat dockle-report.json
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

